package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.sparkfun.SparkFunOTOS;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DistanceSensor;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;

/**
 * Example OpMode. Demonstrates use of gyro, color sensor, encoders, and telemetry.
 *
 */
@Autonomous(name = "MecanumDemo Auto Circle For Loop", group = "MecanumBot")
public class MecanumDemo_Auto_Circle_For_Loop_Test extends LinearOpMode {

    SparkFunOTOS myOtos;
    DcMotorEx m1, m2, m3, m4;
    SparkFunOTOS.Pose2D pos;
    double speed = .1;


    public void runOpMode() throws InterruptedException{
        myOtos = hardwareMap.get(SparkFunOTOS.class, "sensor_otos");

        m1 = hardwareMap.get(DcMotorEx.class, "m2");
        m2 = hardwareMap.get(DcMotorEx.class, "m3");
        m3 = hardwareMap.get(DcMotorEx.class, "m0");
        m4 = hardwareMap.get(DcMotorEx.class, "m1");
        m1.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        m2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        m3.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        m4.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        //m1.setDirection(DcMotor.Direction.REVERSE);
        //m2.setDirection(DcMotor.Direction.REVERSE);
        m3.setDirection(DcMotor.Direction.REVERSE);
        m4.setDirection(DcMotor.Direction.REVERSE);
        m1.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        m2.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        m3.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        m4.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        pos = myOtos.getPosition();

        configureOtos();

        telemetry.addData("Press Start When Ready","");
        updatePositionTelemetry();

        waitForStart();

        for (int i=0; i<4; i++){

            //Drive forward
            driveForward(30);
            //Stop Robot
            stopMotion();
            //Pause Program
            pause();

            //Turn left
            turn(87);
            //Stop Robot
            stopMotion();
            //Reset OTOS Tracking Position
            reset();
            //Pause Program
            pause();
        }
    }

    private void driveForward(double inches){
        while (pos.y < inches) {
            pos = myOtos.getPosition();
            m1.setPower(speed);
            m2.setPower(speed);
            m3.setPower(speed);
            m4.setPower(speed);
            updatePositionTelemetry();
        }
    }

    private void turn(double degrees){
        while (pos.h < degrees) {
            pos = myOtos.getPosition();
            m1.setPower(-speed);
            m2.setPower(-speed);
            m3.setPower(speed);
            m4.setPower(speed);
            updatePositionTelemetry();
        }
    }

    private void reset(){

        myOtos.resetTracking();
        pos = myOtos.getPosition();
        telemetry.addLine("DID IT RESET?)");
        telemetry.addData("X coordinate", pos.x);
        telemetry.addData("Y coordinate", pos.y);
        telemetry.addData("Heading angle", pos.h);
        telemetry.update();
    }
    private void pause() {
        sleep(500);
    }

    private void updatePositionTelemetry() {
        // Log the position to the telemetry
        pos = myOtos.getPosition();
        telemetry.addData("X coordinate", pos.x);
        telemetry.addData("Y coordinate", pos.y);
        telemetry.addData("Heading angle", pos.h);

        // Update the telemetry on the driver station
        telemetry.update();
    }

    private void stopMotion() {
        m1.setPower(0);
        m2.setPower(0);
        m3.setPower(0);
        m4.setPower(0);
        pause();
    }

    private void configureOtos() {
        telemetry.addLine("Configuring OTOS...");
        telemetry.update();

        myOtos.setLinearUnit(DistanceUnit.INCH);

        myOtos.setAngularUnit(AngleUnit.DEGREES);

        SparkFunOTOS.Pose2D offset = new SparkFunOTOS.Pose2D(0, -7.15, 0);
        myOtos.setOffset(offset);

        myOtos.setLinearScalar(1.022);
        myOtos.setAngularScalar(0.993);

        myOtos.calibrateImu();

        myOtos.resetTracking();

        SparkFunOTOS.Pose2D currentPosition = new SparkFunOTOS.Pose2D(0, 0, 0);
        myOtos.setPosition(currentPosition);

        SparkFunOTOS.Version hwVersion = new SparkFunOTOS.Version();
        SparkFunOTOS.Version fwVersion = new SparkFunOTOS.Version();
        myOtos.getVersionInfo(hwVersion, fwVersion);

        telemetry.addLine("OTOS configured! Press start to get position data!");
        telemetry.addLine();
        telemetry.addLine(String.format("OTOS Hardware Version: v%d.%d", hwVersion.major, hwVersion.minor));
        telemetry.addLine(String.format("OTOS Firmware Version: v%d.%d", fwVersion.major, fwVersion.minor));
        telemetry.update();
    }
}
